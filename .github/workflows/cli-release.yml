name: CLI Release

on:
  push:
    tags:
      - 'cli/v*'
  # workflow_dispatch is kept to allow manual releases if needed.
  # Remove if all releases must be tag-triggered.
  workflow_dispatch:

# Add permissions for creating releases
permissions:
  contents: write
  pull-requests: write # May not be needed if PRs don't trigger this directly

jobs:
  build:
    # The build job remains largely the same, as it builds based on checked-out code.
    # It doesn't strictly need the version from the tag, but its artifacts will be used by the release job.
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: buster-cli-linux-x86_64.tar.gz
            use_tar: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: buster-cli-darwin-x86_64.tar.gz
            use_tar: true
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: buster-cli-darwin-arm64.tar.gz
            use_tar: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: buster-cli-windows-x86_64.zip
            use_tar: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for the release job if it needs history for release notes

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Configure Cargo for optimized build
        run: |
          mkdir -p .cargo
          echo '[profile.release]' > .cargo/config.toml
          echo 'lto = true' >> .cargo/config.toml
          echo 'codegen-units = 1' >> .cargo/config.toml
          echo 'panic = "abort"' >> .cargo/config.toml
          echo 'opt-level = 3' >> .cargo/config.toml
          echo 'strip = true' >> .cargo/config.toml

      - name: Build optimized release
        working-directory: ./cli # Assuming this is the workspace root for the cli crate
        # If your CLI project is in cli/cli, adjust working-directory to ./cli/cli
        run: cargo build --release --target ${{ matrix.target }} --manifest-path ./cli/Cargo.toml

      - name: Determine Binary Name and Path
        id: binary_info
        shell: bash
        run: |
          CRATE_NAME=$(basename $(find cli/target/${{ matrix.target }}/release -maxdepth 1 -type f -executable ! -name '*.dSYM' ! -name '*.pdb'))
          echo "CRATE_NAME=$CRATE_NAME"
          echo "Binary name: $CRATE_NAME"
          echo "binary_name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "binary_path=cli/target/${{ matrix.target }}/release/$CRATE_NAME"
          echo "binary_path_val=cli/target/${{ matrix.target }}/release/$CRATE_NAME" >> $GITHUB_OUTPUT

      - name: Compress binary (Unix)
        if: matrix.use_tar
        shell: bash
        run: |
          cd cli/target/${{ matrix.target }}/release
          tar czf ${{ matrix.artifact_name }} ${{ steps.binary_info.outputs.binary_name }}
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            shasum -a 256 ${{ matrix.artifact_name }} > ${{ matrix.artifact_name }}.sha256
          else
            sha256sum ${{ matrix.artifact_name }} > ${{ matrix.artifact_name }}.sha256
          fi

      - name: Compress binary (Windows)
        if: matrix.use_tar == false
        shell: pwsh
        run: |
          cd cli/target/${{ matrix.target }}/release
          Compress-Archive -Path ${{ steps.binary_info.outputs.binary_name }}.exe -DestinationPath ${{ matrix.artifact_name }}
          Get-FileHash -Algorithm SHA256 ${{ matrix.artifact_name }} | Select-Object -ExpandProperty Hash > ${{ matrix.artifact_name }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: buster-cli-${{ matrix.target }}
          path: |
            cli/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
            cli/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}.sha256
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    # Condition this job to run only for tag pushes, 
    # or add logic to handle workflow_dispatch differently if version isn't from tag
    if: startsWith(github.ref, 'refs/tags/cli/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # For release notes generation

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        # No specific path needed, it downloads all to a directory named after the artifact

      - name: Extract version from Git tag
        id: get_version
        run: |
          # github.ref_name will be like "cli/v1.2.3"
          VERSION=$(echo "${{ github.ref_name }}" | sed 's#^cli/v##')
          if [ -z "$VERSION" ]; then
            echo "Could not extract version from tag: ${{ github.ref_name }}"
            # Potentially fail here if version is critical and not found
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION from tag ${{ github.ref_name }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }} # Use the tag that triggered the workflow
          name: CLI Release v${{ steps.get_version.outputs.version }} # Name the release clearly
          files: |
            **/buster-cli-linux-x86_64.tar.gz
            **/buster-cli-linux-x86_64.tar.gz.sha256
            **/buster-cli-darwin-x86_64.tar.gz
            **/buster-cli-darwin-x86_64.tar.gz.sha256
            **/buster-cli-darwin-arm64.tar.gz
            **/buster-cli-darwin-arm64.tar.gz.sha256
            **/buster-cli-windows-x86_64.zip
            **/buster-cli-windows-x86_64.zip.sha256
          draft: false
          prerelease: false
          generate_release_notes: true # This uses conventional commits from the tag to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 